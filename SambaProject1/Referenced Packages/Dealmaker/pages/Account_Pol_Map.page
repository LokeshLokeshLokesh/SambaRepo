<apex:page standardController="DMAPP__Account_Political_Map__c" 
    extensions="DMAPP.AccountPoliticalMapController,DMAPP.StandardControllerPPTExtension,DMAPP.ServerSideDeviceDetection"
    sidebar="false" 
    showHeader="{!NOT(fullScreen)}"
    docType="html-5.0"
    tabStyle="Account" 
    action="{!logPoliticalMapUsage}"
    >
    
    <apex:messages />

    <c:jQuery chosen="true"
        jQueryUI="true"
        touchPunch="true"
        tableDnD="true"
        tooltip="true" 
        paging="true"
        underscore="true"
        cookies="true"
     />

    <apex:include pageName="DMAPP__DealmakerTouchLaunchPad" />
    <c:MobileRedirect applyLightning="true"/>
    <c:PlaceholderOne />
    <c:AttachmentUploader />
    <c:PolMapLastModifiedHelper />
    <c:salesforce_design_system_helper />
    <c:CustomLabelJSBridge alignContext="am"/>
    <c:salesforce_design_system_helper slds_version="2.0.2"/>
	<c:SldsIcons />
    <c:ObjectiveCreateModal accountPlanId="{!accountPlan.Id}" jQueryUIDateFormat="{!jQueryUIDateFormat}"/>
	
    <!--[if lte IE 8]>
    <style>
        span#sidePanelToggleButton, #contactsSidePanelToggleButton {
           -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=3.061616997868383e-16, M12=1, M21=-1, M22=3.061616997868383e-16, SizingMethod='auto expand')";
        }
        
        span#contactsSidePanelToggleButton {
            -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=-1.8369701987210297e-16, M12=-1, M21=1, M22=-1.8369701987210297e-16, SizingMethod='auto expand')";
        }
        
        span#sidePanelToggleButton.sidePanelToggleButtonCollapsed {
            -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=-1.8369701987210297e-16, M12=-1, M21=1, M22=-1.8369701987210297e-16, SizingMethod='auto expand')";
        }
        span#contactsSidePanelToggleButton.sidePanelToggleButtonCollapsed {
           -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=3.061616997868383e-16, M12=1, M21=-1, M22=3.061616997868383e-16, SizingMethod='auto expand')";
        }
        
        span.accordionHeaderToggleExpanded {
           -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=-1, M12=1.2246467991473532e-16, M21=-1.2246467991473532e-16, M22=-1, SizingMethod='auto expand')";
        }
        span.accordionHeaderToggleCollapsed {
            -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=-1.8369701987210297e-16, M12=-1, M21=1, M22=-1.8369701987210297e-16, SizingMethod='auto expand')";
        }
    </style>
    <![endif]-->

    <apex:stylesheet value="{!URLFOR($Resource.DMAPP__SLDS100_TAS, 'assets/styles/salesforce-lightning-design-system-vf.min.css')}"/>  

    <style>
  
        @import url("{!URLFOR($Resource.ttgcss,          'ttgcss/layout.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/ttg_orgchart.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/miniclicker.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/search-widget/searchWidget.css')}");
        @import url("{!URLFOR($Resource.ttgcss,          'ttgcss/jquery.pulse.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/political_side_panel.css')}"); 
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/political_map.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/tooltip.css')}");
        @import url("{!URLFOR($Resource.jQueryUI,        'css/custom-theme/jquery-ui-1.8.21.custom.css')}"); 
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/glyphs/style.css')}");

        @import url("{!URLFOR($Resource.SmartOM,         'css/summarytab.css')}");
        @import url("{!URLFOR($Resource.SmartOM,         'css/chatterpost.css')}");
            
        /* start of additions for Chatter */
    
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_side_panel.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_post.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/glyphs/style.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_summary.css')}");
        
        /* end of additions for Chatter */
                    
		div.canvasDiv {
		    background-color: #AEBBC9;
		}
                    
        div#ttg_pol_map_watermark {
            color: #D7DDE4;
        }
                    
        .fadedDialog {
            opacity: 0.1;
            filter: alpha(opacity=10); 
        }
        
        div.draggableOpportunityHelper  {
            z-index: 5;
            border : 1px outset black;
            background: url('{!URLFOR($Resource.TAM, 'images/icon_drag.png')}') 5px center no-repeat;            
        }
        
        .contactname  {
            padding-left: 25px;
            background: url('{!URLFOR($Resource.TAM, 'images/icon_drag.png')}') 5px center no-repeat;        
        }
        
        .contacttitle {
            margin-left: 5px;
            color: #999;
        }
        
        div#sidePanelDiv {
            z-index: 10;
        }
        
        div.ttg-oc-dragging-helper {
            z-index: 9;
        }
        
        div.side_panel_rule_advice {
            margin-top : 5px;
            padding-bottom : 5px;
        }

        body {
            font-family: Arial,Helvetica,Sans-Serif !important;
        }
        
        div.smartOMOpportunitySummary {
            float: left;
        }
        
        div.smartOMOpportunitySummary.AM {
            width: 60%
        }
        
        div.smartOMOpportunitySummary div.smartOMBackLink {
           margin-top: 0;
        }
        
        .map-account-name, .map-name {
            padding-left: 30px;
        }
        
        /* Restores AJAX spinner size to normal (AMOF-813) */
        .spinner {
            height: auto;
            width: auto;
        }
            #legendDiv { min-width: 762px; }
        
                    #legendDiv .ttg_org_chart_legend_box_panel ul {
                        height: auto; 
                        min-height: 193px;
                    } 

        .hideTab {
            height: 0 !important;
            padding: 0 !important;
        }
        
        div#buyingroleedit_chosen { width: 150px !important; }
        
        div.tasZoomControl { z-index: 8 !important; }
        
        /* Reposition legend for iPad (AMOF-1057) */ 
        
        @media only screen 
        and (min-device-width: 768px) 
        and (max-device-width: 1024px)  {
        
            div.helpAndPPTContainerAccount {
                position: relative;
                display: inline-block;
                margin-left: 16px;
                margin-top: 10px;
            }


            #legendDiv {
                background-color: rgb(255, 255, 255); 
                border: 2px solid rgb(156, 156, 156);
                border-radius: 4px;
                font-size: 8px;
                left: 100px; 
                padding: 3px;  
                position: absolute;
                z-index: 25;                    
            }

            div.accountMapUsageMessageSectionOpp {
                margin-left: 0px;    
            }
        }       

        
                    
        div.smartOMPanel .myChatterPostPopup .myChatterTextAreaContainer {
            overflow: visible;
        }
        
        div.smartOMPanel .myChatterPostPopup .myChatterTextAreaContainer {
            max-height: none;
        }
        
        div.smartOMPanel .feedcontainer {
            max-height: 300px;
            overflow: auto;
        }

        /* Breadcrumb(le) CSS */
        div.smartOMPanel .breadcrumb_altify_logo {
            background: url('{!URLFOR($Resource.Common, 'images/altify_logo@2x.png')}') no-repeat;
            background-size: 100%;
            float: left;
            width: 17px;
            height: 30px;
            margin-right: 5px;
        }

        .breadcrumb_container {
            display: inline-block;
        }

        .breadcrumb_type_icon{
            height: 1.25rem;
            width: 1.50rem;
            border-radius: 3px;
            margin-top: 0px;
            float: left;
        }

        .breadcrumb_account_icon{ 
            background: url('{!URLFOR($Resource.TAM, 'images/account_60.png')}') no-repeat;
            background-size: 100%;
        }

        ul.breadcrumbs.accountPlan {
            margin-top:5px;
        }

        ul.breadcrumbs {
            list-style-type: none;
            padding-left: 0;
            white-space: nowrap;
            margin-top: 3px;
            display: inline-block;
            max-width: 70%;
            float: left;
        }

        .breadcrumbs li {
            color: #222;
            font-size: 12px;
            display: inline-block;
            margin-left: 0;
            text-overflow: ellipsis;
            overflow: hidden;
            max-width: 22.5%;
            white-space: nowrap;
        }

        .breadcrumbs li.read-only-li{
            margin-right: 15px;
        }

        .breadcrumbs.account_level li{
            max-width: 56%;
        }

        ul.breadcrumbs.account_level {
            margin-bottom: 20px;
        }

        .currMap {
            float: left;
            margin-top: 12px;
            margin-left: 20px;
            /*font-size: 1.2em;*/
            /*max-width: 80%;*/
            width: 75%;
        }

        .currMap.accountSizing{
            width: 60%;
        }

        @media only screen and (max-width: 1410px)  {    
            ul.breadcrumbs {
                /*max-width: 70%;*/
                min-width: 65%;
            }   

            ul.breadcrumbs.account_level {
                max-width:50%;
            }

            .breadcrumbs li {
                /*max-width: 24%;*/
            }
            .breadcrumbs.account_level li{
                max-width:44%;
            }

            .accountMapUsageMessageSectionOpp {
                margin-left: 30px !important;
                float: left !important;
            }


            .currMap {
                max-width: 80% !important;
                width: 65% !important;
            }  

            .linkedMapSection {
                float: right;
                max-width: 22% !important;
                clear: right !important;
                padding-top: 6px;
                margin-top: 0 !important;
            }
        }
         
         @media only screen and (max-width: 1024px)  {    
             ul.breadcrumbs {
                max-width: 50%;
            }   

            .breadcrumbs li {
                /*max-width: 22%;*/
            }

            .currMap{
                width: 50% !important;
            }

            .linkedMapSection {
                /*clear: right !important;*/
                float: right;
                margin-top: 0 !important;
                margin-right: 10px;
            }   
         }
        
        
         @media only screen and (max-width: 768px), only screen and (max-device-width: 768px) {
            .currMap {
                width: 65% !important;
            }

            ul.breadcrumbs {
                max-width: 90%;
            }

            .breadcrumbs li {
                /*max-width: 22%;*/
            }

            .breadcrumbs li.read-only-li{
                float: left;
                margin-top: 12px;
                margin-left: -26px;
            }

            .breadcrumbs li.read-only-li::first-letter{
                color: #fff;
            }

            div.helpAndPPTContainer {
                /* margin-top: -28px !important;*/
                margin-bottom: 15px;
            }

            div.accountMapUsageMessageSectionOpp {
                margin-left: 0px !important;
                margin-bottom: 6px;
                margin-top: 5px;
            }

            .smartOMPanel .linkedMapSection{
                max-width: 25% !important;
                padding-left: 0 !important;
                margin-top: 22px !important;
            }

            .smartOMPanel .linkedMapSection.editable-adjust{
                margin-top: 0px !important;
            }

            ul.linkedMap li:first-child {
                text-overflow: unset;
                max-width: 60% !important;
            }


            ul.linkedMap li {
                max-width: 38% !important;
            }

            .backToMap {
                /*display: none;*/
            }

            .accountMapUsageMessageSectionOpp.fullyHiddenSection {
                display: inline-block !important;
                visibility: hidden;
            }
         }
         
         @media only screen and (max-width: 667px), only screen and (max-device-width: 667px) {
            .breadcrumbs li {
                max-width: 20%;
            }

            ul.breadcrumbs {
                max-width: 30%;
            }  
         }

         @media only screen and (max-width: 330px), only screen and (max-device-width: 330px) {
            .breadcrumbs li {
                max-width: 5%;     
            }
         }

        .breadcrumbs li a {
            text-decoration: none;
            color: #222;
        }

        .breadcrumbs li a:hover {
            color: #0070d2;
            text-decoration: underline;
        }

        .breadcrumbs li.current a:hover {
            text-decoration: none;
            color: #222;
        }

        .breadcrumbs li:first-child {
            padding-left: 0;
        }

        .breadcrumbs li:last-child {
            padding-right: 0;
        }

        .breadcrumbs li.current {
            font-weight: bold;
        }

        .breadcrumbs li:last-child:after {
            background: transparent;

        }

       
       .breadcrumbs .separator{
            content: '';
            background: url('{!URLFOR($Resource.TAM, 'images/chevron_right.png')}');
            background-repeat: no-repeat;
            background-size: 5px;
            background-position: center center;
            display: inline-block;
            width: 5px;
            height: 8px;
            margin-right: 4px;
            margin-left: 8px;
            margin-bottom: 3px;
        }

        /* END Breadcrumb(le) CSS */

        div.map {
            background-color: #e3e3e3;
            margin-bottom: 15px;
            padding: 5px 10px;
            position: relative;
            clear: both;
            height: 56px;

        }

        div.AMCurrentViewMap div.map_title {
            /*font-size: 100%;*/
            font-weight: 400;
            margin: 0 0px 4px 30px;
            height: 30px;
            float: left;
            color:#222;
        }

        .smartOMOpportunitySummary .map-account-name{
        	text-decoration: underline;
    		color: #00396b;
        }
        
        .map-account-name {
            background: url('{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_pm_folder.png')}') 6px center no-repeat;        
            display: inline-block;
            height: 20px;
        }
        
        .map-name {
            background: url('{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_pm_level.png')}') 7px center no-repeat;        
            display: inline-block;
            height: 20px;
            margin-left: 10px;
        }
        
        .map-changer {
            padding: 0 10px;
            vertical-align: middle;
        }
        
        .AMCurrentViewMap {
            padding-top: 5px;
            padding-left: 20px;
            /*font-size: 0.9em;*/
            clear: left;
            float: left;
            margin-top: -8px;
        }

        .currMap.accountPlan .ul.breadcrumbs {

        }

        .smartOMMainHelpLink{
            display: inline-block;
            float: right;
            margin: 0px 15px 0 0;
        }
        
        span.backToMap {
            background-image: url('{!URLFOR($Resource.ttgomjs, 'ttg/graph/feimages/icon_delete.png')}');
            cursor: pointer;
            float: right;
            height: 16px;
            margin: 10px 0px 0px 0px;
            width: 16px;
        }
        
        .changeMap {
            background-image: url('{!URLFOR($Resource.TAM, 'images/icon_edit_criteria.png')}');
            background-repeat: no-repeat;
            float: right;
            height: 16px;
            margin-top: 15px;
            width: 16px;
            padding-right: 20px;
            cursor: pointer;
        }

        
        .linkedMapSection {
            /*float: right;*/
            margin-top: 15px;
            padding-right: 20px;
            color: #222;
            max-width:25%;
            white-space: nowrap;
            text-overflow: ellipsis;
            overflow: hidden;
            clear: both;
            padding-left: 64px;
            margin-bottom: 5px;
        }
        /** Linked Map Breadcrumbs **/
        .linkedMapSection ul.linkedMap{
             list-style-type: none;
            padding-left: 0;
            white-space: nowrap;
            margin-top: 3px;
            display: inline-block;
            max-width:85%;
            margin-bottom: 0px;
        }

        ul.linkedMap li:first-child{
            max-width:60%;
        }

        ul.linkedMap li{
            color: #222;
            font-size: 12px;
            display: inline-block;
            margin-left: 0;
            max-width: 45%;
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }
        /** END Linked Map breadcrumbs **/
       	.accountMapUsageMessageSection {
		    float: left;
		    margin-left: 70px;
		    margin-top: 6px;	    
		    padding: 5px 10px 5px 22px;
		    border-radius: 6px;
		    border: 1px solid #445e75;
		    background: url({!URLFOR($Resource.ttgomjs, 'ttg/graph/feimages/icon_info.png')}) no-repeat scroll 5px center rgba(0, 0, 0, 0);
		}
		
       	.accountMapUsageMessageSectionOpp {
		    /*margin-left: 15px;*/
            margin-bottom: 8px;
            display: inline-block;	    
		    padding: 5px 10px 5px 22px;
		    border-radius: 6px;
		    border: 1px solid #445e75;
            float: left;
		    background: url({!URLFOR($Resource.ttgomjs, 'ttg/graph/feimages/icon_info.png')}) no-repeat scroll 5px center rgba(0, 0, 0, 0);
            
		}

        .accountMapUsageMessageSectionOpp.hideSection{
            visibility: hidden;
        }		

        .accountMapUsageMessageSectionOpp.fullyHiddenSection {
            display:none;
        }
		
       	#accountMapUsageDialog a, 
       	.accountMapUsageMessageSection a,
       	.accountMapUsageMessageSectionOpp a {
			color: #405773;
			text-decoration: underline;
			cursor: pointer;
		}		
		
		.accountMapUsageDialogScrollPanel {
			overflow-y: auto;
		   	max-height: 200px;
		   	min-height: 100px;
		   	overflow-y: auto;	
		   	/*border: 1px solid #ccc;*/
		   	padding: 10px;		
		}
		
        div.add_objective{
            position: relative;
            float: right;
            margin-right: 10px;
            margin-top: -5px
        }
        
        div.add_action{
            position: relative;
            margin: 0px 15px 0 0;
            display: inline-block;
            font-weight: 500;
            font-size: 12px;
            line-height: 33px;
        }


		/* DMPS-1497 IE specific media queries*/
		@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: 943px) and (orientation:portrait) {	 
			
			.salesforce1 div#ttgCanvasDiv {
				max-width: none;
				height: 1423px !important; /* required to overwrite inline styles on rotation*/
				width: 943px !important; /* required to overwrite inline styles on rotation*/
			}
			
			.salesforce1 div.canvas {
				max-width: none;
				height: 100%;
				width: 100%;
			}
		}

		@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: 1423px) and (orientation:landscape) {
			.salesforce1 div#ttgCanvasDiv {
				max-width: none;
				height: 943px !important; /* required to overwrite inline styles on rotation*/
				width: 1423px !important; /* required to overwrite inline styles on rotation*/
			}
			
			.salesforce1 div.canvas {
				max-width: none;
				height: 100%;
				width: 100%;
			}
		}

        div.helpAndPPTContainer{
            max-height: 25px !important;
            margin-top: 8px;
            padding-bottom: 6px;
            margin-left: 0;
        }

        div.helpAndPPTContainerAccount {
            width: auto;
            /*margin-top: 6px;*/
            margin-right: 10px;
            position: relative;
            right: 0px;
            float: right;
            top: 6px;
               
        }


        @media only screen and (max-device-width: 1024px) and (orientation:portrait) { 
            
            ul.helpDropdown{
                right: 20px;
                top: 30px;

            }
        }

        .slds-icon_container.altify-help-button-container {
            float: left;
        }

       /**
        * DMDEV-9352 - AM Navigation - Global Create Button
        **/

        .create_dropdown{
            float: left;
            margin: 0px 15px 0 0;
            position: relative;
            display: inline-block;
            font-weight: 500;
            font-size: 12px;
            line-height: 33px;
        }

        .create_dropdown .show_dropdown{
            display:block !important;
        }

        .slds .disabled_button{
            background-color: #fff !important;
            cursor: default !important;
            color: #d8dde6 !important;
            pointer-events: none !important;
        }
    </style>

    <script src="/soap/ajax/25.0/connection.js"></script>
    
    <apex:includeScript value="{!$Resource.DMAPP__l10njs}" />
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__prefix)}"/>
    
    
     <div class="smartOMPanel">
        
             <apex:outputPanel id="smartOMBackLinkPolMapExpress2" layout="block" styleClass="smartOMBackLink" rendered="{!opportunityMapId != null}">
                 <c:outputLink target="_top" value="{! URLFOR($Page.am_opp_map_app, null, [id=opportunityMapId])}" styleClass="backlink">Back to Opportunity Map</c:outputLink>
             </apex:outputPanel>
        
             <apex:outputPanel styleClass="currMap" rendered="{!opportunityMapId != null}">
                <span class="breadcrumb_altify_logo"></span>
                <span class="breadcrumb_type_icon breadcrumb_account_icon"></span>
                <ul class="breadcrumbs accountPlan">
                
                    <li>
                        <c:outputLink target="{!IF(isWin8Touch, '_self', '_top')}" title="{!account.Name}" value="/{!account.Id}" styleClass="AM"> {! account.Name }</c:outputLink>
                    </li>
                    <span class="separator"></span>
                    <li>                                                                                     
                        <c:outputLink target="{!IF(isWin8Touch, '_self', '_top')}" title="{! accountPlan.Name }" value="{! URLFOR($Page.am_opp_map_app, null, [id=opportunityMapId])}" rendered="{!$CurrentPage.parameters.retURL == null}"  styleClass="AM">  {! accountPlan.Name }
                        </c:outputLink>               
                        <c:outputLink target="{!IF(isWin8Touch, '_self', '_top')}" title="{! accountPlan.Name }" value="{!$CurrentPage.parameters.retURL}" rendered="{!$CurrentPage.parameters.retURL != null}" styleClass="AM">  
                            {! accountPlan.Name }
                        </c:outputLink>              
                    </li>
                    <span class="separator"></span>
                    <li>                                                                                                                                        
                        <c:outputLink target="{!IF(isWin8Touch, '_self', '_top')}" title="{! planUnit.Name }" value="{! URLFOR($Page.am_opp_map_app, null, [id=opportunityMapId])}" rendered="{!$CurrentPage.parameters.retURL == null}" styleClass="AM">  {!  planUnit.Name}
                        </c:outputLink>               
                        <c:outputLink target="{!IF(isWin8Touch, '_self', '_top')}" title="{! planUnit.Name }" value="{!$CurrentPage.parameters.retURL}" rendered="{!$CurrentPage.parameters.retURL != null}" styleClass="AM">  {!  planUnit.Name}
                        </c:outputLink>               
                    </li>
                    <span class="separator"></span>
                    <li class="current">
                        <apex:outputText title="{!accountMap.Name}" value="{! accountMap.Name }" styleClass="map_title"></apex:outputText>
                        
                    </li>
                    <li class="current read-only-li">
                        <apex:outputText value=" - Read Only Access" styleClass="readOnlyText" rendered="{!NOT(editable)}"/>
                    </li>
                </ul>
                        <apex:outputPanel styleClass="{! IF(accountMapUsage != null && accountMapUsage.usedElseWhere, 'accountMapUsageMessageSectionOpp', 'accountMapUsageMessageSectionOpp  fullyHiddenSection') }" layout="block">  
                            Note: Used elsewhere. <a id="showAccountMapUsageLinkOpp">Tell me where</a>
                        </apex:outputPanel>
             </apex:outputPanel>

            <apex:outputPanel styleClass="currMap accountSizing" rendered="{!opportunityMapId == null && NOT(accountMapUsage.usedElseWhere)}">
                <span class="breadcrumb_altify_logo"></span>
                <span class="breadcrumb_type_icon breadcrumb_account_icon"></span>
                <ul class="breadcrumbs account_level">
                   
                    <li>
                        <c:outputLink target="{!IF(isWin8Touch, '_self', '_top')}" title="{!account.Name}" value="/{!account.Id}" styleClass="AM"> {! account.Name}</c:outputLink>
                    </li>
                    <span class="separator"></span>
                    <li class="current">
                        <apex:outputText title="{! accountMap.Name}" value="{! accountMap.Name}" styleClass="map_title"></apex:outputText>
                        
                    </li>
                    <li class="current">
                        <apex:outputText value=" - Read Only Access" styleClass="readOnlyText" rendered="{!NOT(editable)}"/>
                    </li>
                </ul>
                
             </apex:outputPanel>


              <apex:outputPanel styleClass="currMap accountSizing" rendered="{!opportunityMapId == null && accountMapUsage != null && accountMapUsage.usedElseWhere}">
                <span class="breadcrumb_altify_logo"></span>
                <span class="breadcrumb_type_icon breadcrumb_account_icon"></span>
                <ul class="breadcrumbs account_level">
                    
                    <li>
                        <c:outputLink target="{!IF(isWin8Touch, '_self', '_top')}" title="{!account.Name}" value="/{!account.Id}" styleClass="AM"> {! account.Name}</c:outputLink>
                    </li>
                    <span class="separator"></span>
                    <li class="current">
                        <apex:outputText title="{! accountMap.Name}" value="{! accountMap.Name}" styleClass="map_title"></apex:outputText>
                        
                    </li>
                    <li class="current">
                        <apex:outputText value=" - Read Only Access" styleClass="readOnlyText" rendered="{!NOT(editable)}"/>
                    </li>
                </ul>
                <apex:outputPanel styleClass="{! IF(accountMapUsage != null && accountMapUsage.usedElseWhere, 'accountMapUsageMessageSectionOpp', 'accountMapUsageMessageSectionOpp hideSection') }" layout="block" >
                    Note: Used elsewhere. <a id="showAccountMapUsageLinkOpp">Tell me where</a>
                </apex:outputPanel>
             </apex:outputPanel>
        
        <div id='reloadPageLink' style='display:none'>
			<apex:form >
	        	<apex:actionFunction name="reloadPage" action="{!reload}" />
	        </apex:form> 
		</div>
		

        <apex:outputPanel styleClass="{! IF (opportunityMapId != null, 'helpAndPPTContainer', 'helpAndPPTContainerAccount' ) } slds" layout="block">
            
           <div 
              class="
                create_dropdown  
                slds-dropdown-trigger--click
                "
              style="display: none;"
              onClick="javascript: toggleCreateMenu();" 
              >
                <button 
                    class="
                        create_dropdown_button 
                        slds-button 
                        slds-button--neutral 
                        slds-button--brand
                    ">Create
                  <span class="slds-icon_container">
                    <span
                      class="
                        slds-button__icon--right 
                        slds-button__icon 
                        ldsico-down"
                    />                     
                  </span>
                </button>

                <div 
                    class="
                        slds-dropdown 
                        slds-dropdown--right 
                        create_dropdown_ul"
                        style="display: none;" 
                    >
                  <ul class="dropdown__list" role="menu">
                    <li 
                        id="AddObjectiveLi"
                        class="slds-dropdown__item"
                        style='display:none' 
                    >
                        <a 
                            href="javascript:void(0);"
                            id="AddObjectiveButton"
                            onClick="javascript: showObjectiveCreateEditDialog(null);"
                        >{!$Label.resource_Objective}</a>
                    </li>
                    <li 
                        id="AMPPTLink" 
                        class="slds-dropdown__item"
                        style='display:none' 
                    >
                        <a 
                            href="javascript:void(0);"
                            id="PPTEXPORT2"
                            onclick="javascript: handlePPTX();" 
                        >PPT Export</a>
                    </li>
                  </ul>
                </div>
            </div>
        
            <div id='ActionsDiv' 
                class="
                    add_action 
                    slds-dropdown-trigger--click" 
                onClick='javascript: toggleActionsMenu();'
            >
                  <button id="ActionsButton" class="add_action_button slds-button slds-button--neutral">{!$Label.resource_Actions}
                        <span class="slds-icon_container">
                            <span
                              class="
                                slds-button__icon--right 
                                slds-button__icon 
                                ldsico-down"
                            />                    
                       </span>
                  </button>
                  <div style="display:none" id='ActionsMenu' class="slds-dropdown slds-dropdown--right">
                    <ul class="dropdown__list action_dropdown_ul" role="menu">
                   
                      <apex:outputText rendered="{!editable}">        
                          <li class="slds-dropdown__item">
                        <a role="menuitem" onClick="javascript: renameMap();">
                          <p class="slds-truncate">Rename Map</p>
                        </a>
                      </li>
                      </apex:outputText>
                      
                      <apex:outputText rendered="{!opportunityMapId != null && editable}">        
                          <li class="slds-dropdown__item">
                        <a role="menuitem" onClick="javascript:daGraph.eventManager().fireEvent('change_plan_unit_map');">
                          <p class="slds-truncate">Change Map</p>
                        </a>
                      </li>
                      </apex:outputText>
                      
                      <apex:outputText rendered="{!opportunityMapId == null}">
                      <li class="slds-dropdown__item">
                        <a role="menuitem" onClick='javascript: makeMapPrimary();'>
                          <p class="slds-truncate">Make Map Primary</p>
                        </a>
                      </li>
                      </apex:outputText>
                      
                    </ul>
                  </div>
            </div>

            <apex:outputPanel styleClass="backToMap" onclick="daGraph.eventManager().fireEvent('not_fullscreen')" rendered="{!opportunityMapId != null}"/>

            <div id='accountPlansMainHelp' class="smartOMMainHelpLink">
                
                <c:help_dropdown_button />

            </div> 

        </apex:outputPanel>


			<div id="accountMapUsageDialog" style="display:none;">	    
				<p>Making changes to this map will impact the following:</p>    
				<div class="accountMapUsageDialogScrollPanel">
					<apex:outputPanel id="accountMapUsageUnits" layout="block" rendered="{!accountMapUsage != null && accountMapUsage.planUnits != null && accountMapUsage.planUnits.size != 0}">
					<div>
					    <strong>Plan Units</strong>
					    <ul>
					    <apex:repeat value="{!accountMapUsage.planUnits}" var="usageItem">
					   		<li><a href="{!usageItem.url}" target="blank">{!usageItem.name}</a></li>
						</apex:repeat>
						</ul>
					</div>
					</apex:outputPanel>  	
					<apex:outputPanel id="accountMapUsageMaps" layout="block" rendered="{!accountMapUsage != null && accountMapUsage.accountMaps != null && accountMapUsage.accountMaps.size != 0}">
					<div>
					    <strong>Accounts</strong>
					    <ul>
					    <apex:repeat value="{!accountMapUsage.accountMaps}" var="usageItem">
					   		<li><a href="{!usageItem.url}" target="blank">{!usageItem.name}</a></li>
						</apex:repeat>
						</ul>
					</div>
                	</apex:outputPanel>  
				</div>	
			</div>	        		                          
	         <!-- styleClass="{! IF (opportunityMapId != null, 'helpAndPPTContainer', 'helpAndPPTContainerAccount' ) } slds" -->
             <apex:outputPanel id="linkedMapSection" layout="block" styleClass="{! IF ( NOT(editable), 'linkedMapSection', 'linkedMapSection editable-adjust' ) }" rendered="{!opportunityMapId != null && planUnit != null && planUnit.DMAPP__Account_Political_Map__c != null  && (planUnit.Account_Political_Map__r.Account__r.Name != account.Name || planUnit.Account_Political_Map__r.Name != accountMap.Name )}">
                <ul class="linkedMap">
                    <li>Linked Map:&nbsp;</li>
                    <li> 
                    <apex:outputText value="{! planUnit.Account_Political_Map__r.Account__r.Name}" title="{! planUnit.Account_Political_Map__r.Account__r.Name}"></apex:outputText> 
                    </li>
                    <li>/&nbsp;</li>
                    <li>
                    <apex:outputText value="{!planUnit.Account_Political_Map__r.Name}" title="{!planUnit.Account_Political_Map__r.Name}"></apex:outputText>
                    </li>
                </ul>
            </apex:outputPanel>
             <apex:outputPanel layout="block" styleClass="AMCurrentViewMap" rendered="{!opportunityMapId != null}">
            
		         <style>
		         	ul.helpDropdown {
		         		top: 25px !important;
		         	}
		         </style>	                                  
             </apex:outputPanel>
            <apex:outputPanel layout="block" styleClass="AMCurrentViewMap" rendered="{!opportunityMapId == null}">
                <style>
                    ul.helpDropdown {
                        top: 20px !important;
                    }
                 </style>                                     
            </apex:outputPanel>
        
        
        <div class="chatterContainer">                   
             <!-- <apex:include pageName="ChatterPostPolMap"/> -->
        </div>
		

        

        <!--</div>-->
    </div>


    <div id="TAS">
        
        <apex:include pageName="DMAPP__Account_Pol_Map_Print_Fix_IE7" />
        
        <div class="all">       
            <div id="ttgCanvasDiv" class="canvasDiv test" style="overflow:hidden; position:relative;">       
                <div id="ttgCanvas" class="canvas"></div>
            </div>                 
        </div>
    </div>
    
    
    <!-- some images that the code makes use of -->
    <div style="display:none">
  
        <img id="ttg_oc_img_unknown"                                src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_unknown.png')}"/>
        <img id="ttg_oc_img_not_set"                                src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/not_set.gif')}"/>      
        <img id="ttg_oc_img_attention"                              src="{!URLFOR($Resource.ttgomjs, 'ttg/graph/feimages/icon_approved.png')}"/>      
        <img id="ttg_oc_img_grey_x"                                 src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/grey_x.png')}"/>        
        <img id="ttg_oc_img_influences"                             src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/down_alt.png')}"/>      
        <img id="ttg_oc_img_influencedby"                           src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/up_alt.png')}"/>      
        <img id="ttg_oc_img_key_player"                             src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_key_decision.png')}"/>       
        <img id="ttg_oc_influence_drag"                             src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_influence_drag.png')}"/>       
        <img id="ttg_oc_selected"                                   src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_selected.png')}"/>       
    
        <img id="ttg_graph_img_expand"                              src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_expand.png')}"/>       
        <img id="ttg_graph_img_collapse"                            src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_collapse.png')}"/>       
        <img id="ttg_graph_img_external"                            src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_account_external.png')}"/>
        <img id="ttg_graph_img_loading"                             src="{!URLFOR($Resource.ttgomjs, 'ttg/graph/images/loading_icon.gif')}"/>     
        <img id="ttg_graph_img_open_contact"                        src="{!URLFOR($Resource.ttgomjs, 'ttg/graph/feimages/icon_contact_info.png')}"/>     
        <img id="ttg_graph_img_linkedin"                            src="{!URLFOR($Resource.Assessment, 'common/images/linkedIn.png')}"/>     
     
    </div>
        
    <!-- l10n data -->
    <apex:includeScript value="{!$Resource.DMAPP__l10njs}"/>
    
    
    <!-- these are general purpose js libraries -->

    <script>
    
    var $j = jQuery.noConflict();
        
    $j.ajaxSetup({
        jsonp: null,
        jsonpCallback: null,
        async: true
    });
    
    </script>

    <apex:includeScript value="{!URLFOR($Resource.DMAPP__excanvas)}"/> 
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ftk, 'forcetk.js')}"/>
    
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__Raphael, 'raphael-min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__Raphael, 'rgbcolor.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__Raphael, 'canvg.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/lib/ttgutils.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/orgchart/js/profile_picture_widget.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/graph/js/slds_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/graph/js/lightning_styled_components.js')}"/>
    
    <!-- these are org chart specific js pages -->
    
    
    <!--[if lt IE 9]>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/lib/ie.js')}"/> 
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/lib/json2.js')}"/> 
    <!--[endif]-->

    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/alljs.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__CoachMe, 'new_coach/parser.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__CoachMe, 'new_coach/engine.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__CoachMe, 'new_coach/coach_manager.js')}"/>
    
	<apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/orgchart/js/placeholder_node_renderer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/orgchart/js/create_placeholder_node_button.js')}"/>   
	<apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/orgchart/js/confirm_and_fire.js')}"/>
	<apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/orgchart/js/reorder_buttons.js')}"/>  

    <apex:include pageName="DMAPP__AMPoliticalMapCoachRules"/>
        
    <apex:include pageName="DMAPP__CRUD" />
    <apex:include pageName="DMAPP__JSRemoting" />
        
    <script>

        //DMDEV-6854 targeted fix. Need to make salesforce1 logic correct for future release
        if (!ttg.urlServiceInstance.isSalesforce1()) { 
            jQuery('html').removeClass('salesforce1');
        }

        /* 
         * Copyright © {! JSENCODE($Setup.DMAPP__Company_Information__c.DMAPP__Company_Name__c)}. All rights reserved.
         *  
         */        
                
        ttg.context.orgchartbase =  '{!$Resource.ttgomjs}' ;
        ttg.context.decision_criteria_base =  '{!$Resource.DecisionCriteria}' ;
        ttg.context.common = '{!$Resource.Common}';
        ttg.context.orgId = 'RANDOM_ORG_ID';
        ttg.context.sessionId = '{!$Api.Session_ID}';
        ttg.context.url = 'RANDOM_URL';

        ttg.simpleFlatPPTExporter = function(anchorOppId, isLicensedForPP) {

            var api = ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}', accountid : '{!accountMap.id}'} );
            var dialogOpen = true;
            var callCount = 0;

            var spinnerImg = 
                jQuery('<img>')
                    .attr('id', 'tas_ajax_spinner')
                    .addClass('spinner')
                    .attr('src', "{!JSENCODE(URLFOR($Resource.ttgomjs, '/ttg/graph/images/loader.gif'))}")
                ;

            
            function createFutureDownloadAdvice() {
                if (isLicensedForPP) {
                    return jQuery('<ol/>')
                            .append(jQuery('<li/>').text('Dealmaker is preparing your powerpoint presentation.'))
                            .append(jQuery('<li/>').text('Once complete a link will appear below.'))
                }
                else {
                    return jQuery('<ol/>')
                            .append(jQuery('<li/>').text('Dealmaker is preparing your powerpoint presentation.'))
                            .append(jQuery('<li/>').text('Once complete a link will appear below.'))
                            .append(jQuery('<li/>').text('Right click this link and save the file with an extention of \'.xml\'.'))
                            .append(jQuery('<li/>').text('Open this saved file with powerpoint.'))
                            .append(jQuery('<li/>').text('Close this dialog when then \'save as\' has completed.'))
                }
            }


            function createFutureLinkDiv() {
                callCount = 0;
                return  jQuery('<div/>')
                    .css({ width : '100%', 'text-align' : 'center'})
                    .addClass('ttg_future_ppt_exporter_linkdiv')
                    .append(jQuery('<span/>').text('Preparing'));
                    
            }

            function deletefuturePPTX(id) {
                api.deletePPTX(id,
                
                    function() { createfuturePPTX(id) },                    
                    function() { /* error */ },                 
                    function() { /* complete */ }               
                )
                
            }           
            
            function createfuturePPTX(id) {
                api.postPPTX(id,
                    {param: { id: id } },
                    function() { checkForFuturePPTXUrl(id) },                   
                    function() { /* error */ },                 
                    function() { /* complete */ }               
                )
                
            }           

            function checkForFuturePPTXUrl(id) {
                api.getPPTX(id,
                
                    function(responseData) { 
                        if (responseData != null && responseData.downloadURL != null) {

                            jQuery('.ttg_future_ppt_exporter_linkdiv').html('');

                            if (isLicensedForPP) {
                                jQuery('.ttg_future_ppt_exporter_linkdiv').append(
                                    jQuery('<div/>')
                                            .css({width:'100%', 'text-align' : 'center' })
                                            .append(jQuery('<iframe/>', {src : 'https://' + document.domain.replace('dmapp', 'dmppt') + responseData.downloadURL, height : '40px', width : '100%', frameBorder : 0, seamless : 'seamless' }))
                                )
                            }
                            else {
                                jQuery('.ttg_future_ppt_exporter_linkdiv').append(
                                    jQuery('<a/>', {href: responseData.downloadURL })
                                        .css({'text-decoration': 'underline', 'cursor': 'pointer'})
                                        .text('Click to save')
                                )
                            }
                        }
                        else {
                            if (++callCount > 40) {
                                jQuery('.ttg_future_ppt_exporter_linkdiv').html('');
                                jQuery('.ttg_future_ppt_exporter_linkdiv').append(
                                    jQuery('<a/>')
                                        .css({'text-decoration': 'underline', 'cursor': 'pointer'})
                                        .text('Taking too long.  Continue waiting?')
                                        .click(function() { callCount = 0; checkForFuturePPTXUrl(id)} ) 
                                )
                            }
                            else {
                                jQuery('.ttg_future_ppt_exporter_linkdiv').html('');
                                jQuery('.ttg_future_ppt_exporter_linkdiv').append(
                                    jQuery('<span/>').css({'display': 'inline-block', width: '100px', 'text-align': 'left'}).text('Waiting' + dots(callCount, 4))
                                )
                                if (dialogOpen) {
                                    checkForFuturePPTXUrl(id);
                                }
                            }
                            
                        } 
                    },
                    function() { /* error */ },                 
                    function() { /* complete */ }               
                )

            }
            
            function dots(num, mnum) {
            
                var s = '';
                while(s.length < (num % mnum)) {
                    s += '.';
                }

                while(s.length < mnum) {
                    s += ' ';
                }
                
                return s;
            }

            function futureFailure() {
            }
                
            function closeDialog() {
                dialogOpen = false;
                jQuery('#ttg_simple_ppt_exporter_div').remove();
            }
            
            function showDialog() {
                
                jQuery('<div/>',{ id : 'ttg_simple_ppt_exporter_div'})
                    .addClass('ttg_simple_ppt_exporter')
                    .append(
                        createFutureDownloadAdvice()
                    )
                    .append(
                        createFutureLinkDiv() 
                    )
                    .dialog({
                        title       :   'Export Plan to Powerpoint'
                        , width     :   '500px',
                        close: closeDialog
                    });
            }

            showDialog();
            deletefuturePPTX(anchorOppId)
            
            return {
            }
        };    
         
        var daGraph; 

        jQuery(document).ready(function() { 

            if ({!showPPTLink}) {
                if({!isLicensedForPPT}) {
                    jQuery('.create_dropdown').show();
                    jQuery('#AMPPTLink').show();
                }
            }     
            
            if ({! (isLicensedForAccountManager && !isObjectivesDisabledOnPlanType && (planUnit.Id != null) ) }) {
                jQuery('.create_dropdown').show();
                jQuery('#AddObjectiveLi').show();
            }
    		
            if ({!NOT(editable)}) {
                jQuery('#AddObjectiveButton').addClass('disabled_button');
            }

            var accountPolMap = (function() {
                function adaptAddOrgChartContact(data) {
                
                    var adapted = {
                        links : {
                            link : []
                        }
                    };
                    //TODO
                    jQuery.each(data.contacts, function(idx,c) {
                        adapted.links.link.push({
                            id : c.orgchartcontactid, 
                            contactTasks : c.contactTasks, 
                            contactIssues : c.contactIssues,
                            planLevelTaskCount : c.planLevelTaskCount, 
                            color: c.color,
                            squares: c.squares,
                            accountRelationship : c.accountrelationship,
                            customProfilePictureUrl : c.customProfilePictureUrl
                        }
                        );//, accountUnitId: c.accountUnitId});
                    })
                    
                    return adapted;
                }
                
                function adaptSearchOrgCharts(data) {
                
                    var adapted = {
                        "org_charts": {
                            "org_chart": []
                            }
                    }
                                
                    jQuery.each(data.records, function(idx,rec) {
                        adapted.org_charts.org_chart.push({
                            id      :   rec.Id,
                            name    :   rec.Name,//rec[ttg.vfp+'Account__r'].Name,
                            type    :   rec.attributes.type
                        });
                    });
                    
                    return adapted;
                }
                
                        
                function adaptSearchOrgChartsJS(data, typevar) {
                
                    var adapted = {
                        "org_charts": {
                            "org_chart": []
                            }
                    }
                                
                    jQuery.each(data.records, function(idx,rec) {
                        adapted.org_charts.org_chart.push({
                            id      :   rec.Id,
                            name    :   rec.Name,//rec[ttg.vfp+'Account__r'].Name,
                            type    :   typevar
                        });
                    });
                    
                    return adapted;
                }
                
                        
                function adaptSearchOrgChartsJS(data, typevar) {
                
                    var adapted = {
                        "org_charts": {
                            "org_chart": []
                            }
                    }
                                
                    jQuery.each(data.records, function(idx,rec) {
                        adapted.org_charts.org_chart.push({
                            id      :   rec.Id,
                            name    :   rec.Name,//rec[ttg.vfp+'Account__r'].Name,
                            type    :   typevar
                        });
                    });
                    
                    return adapted;
                }
                
                //
                // The Org Chart related calls
                //
                function createGraph(graph, success, error, complete) {
                    // in sfdc native we dont have an org chart object
                    // every org chart is assumed to have one and so we 
                    // will always be able to load one and hence never 
                    // have to create one
                };
                
                function addOrgChartContactJS(graphId, planUnitId, orgChartContacts, success, error, complete) {
                    
                    var succ = function(data) { try { success( adaptAddOrgChartContact(data) ); } finally { complete(); } };
                    var err = ttg.ajaxErrorFunction(error,complete);
                    
                    // handle the array ness in the orgChartContact param
                    
                    var req =  { "occs" : { "contacts" : [] } };
                    
                    jQuery.each( jQuery.makeArray(orgChartContacts), function(idx, occ) {
                            req.occs.contacts.push( { 
                                mapId               :   graphId,
                                
                                political           :   occ.political,
                                adaptability        :   occ.adaptability,
                                coverage            :   occ.coverage,
                                status              :   occ.status,
                                decisionorientation :   occ.decisionorientation,
                                
                                contactid           :   occ.id,
                                hookstoid           :   occ.hookstoid,
                                onbench             :   occ.onbench,
                                accountrelationship :   'internal'
                            }); 
                    });
                    
                    ttgInvoker.invokeVFR(ttg.getController('DMAPP.AccountPoliticalMapController.addOrgChartContact'),
                        req.occs, 
                        planUnitId || null,
                        function(result, event) { 
                            if (event.type == 'exception') { 
                                err(result,event);
                            } else {
                                succ(result); 
                            } 
                        }, {escape: false}
                    )          
                }
            
            
                function bulkUpdateContactAttributeJS(contacts, planunitid, success, error, complete) {
                
                    var succ = function(data) { try { success(data); } finally { complete(); } };
                    var err = ttg.ajaxErrorFunction(error,complete);
                
                    function makeContactsList(arr) {
                        var cl = {
                            contactid : []
                        }
                        
                        if (typeof arr !== 'undefined' && arr.length > 0) {
                            jQuery.each(arr, function(idx, a) { cl.contactid.push(a); });    
                        }
                        
                        return cl;
                    }
                            
                    adaptedPost = {
                        occs    :   {
                            contacts : []
                        }
                    };
                    
                    
                    jQuery.each(jQuery.makeArray(contacts), function(idx, cntct) {
                        var newCntct = {
                                mapId               :   '{!JSENCODE(accountMap.Linked_Map__c)}' ? '{!JSENCODE(accountMap.Linked_Map__c)}' : '{!JSENCODE(accountMap.Id)}',
                                polmapid            :   cntct.polmapid,
                                contactid           :   cntct.id,
                                orgchartcontactid   :   cntct.orgchartcontactid, 
                                ownerid             :   cntct.ownerid,
                                note                :   cntct.note,
                                political           :   cntct.political,
                                adaptability        :   cntct.adaptability,
                                coverage            :   cntct.coverage,
                                status              :   cntct.status,
                                decisionorientation :   cntct.decisionorientation,
                                //keyplayer           :   cntct.keyplayer,
                                //approved            :   cntct.approved,
                                influences          :   makeContactsList(cntct.influences),
                                influencedby        :   makeContactsList(cntct.influencedBy),
                                hookstoid           :   cntct.hookstoid,
                                onbench             :   cntct.onbench,
                                accountrelationship :   cntct.accountrelationship,
                        		placeholder			:	cntct.placeholder,
                        		placeholderreportsto		:	cntct.placeholderreportsto,
                        		placeholdertitle			:	cntct.placeholdertitle
                            };
                
                        adaptedPost.occs.contacts.push(newCntct);
                    })
                    
                    
                    var req = JSON.stringify(adaptedPost);
                    
                    ttgInvoker.invokeVFR(ttg.getController('DMAPP.AccountPoliticalMapController.updateContactAttribute'),
                        adaptedPost.occs, 
                        planunitid || null,
                        function(result, event) { 
                            if (event.type == 'exception') { 
                                err(result,event);
                            } else {
                                succ(result); 
                            }
                        }, {escape: false}
                    )                       
                }
                
                function updateContactAttributeJS(contactId, planunitid, contactAttr, orgChartMetadata, success, error, complete) {
                    bulkUpdateContactAttributeJS(jQuery.makeArray(contactAttr), planunitid, success, error, complete);
                }
                
                
        
                function removeOrgChartContactJS(contactId, planunitid, success, error, complete) {   
                
                    var succ = function(data) { try { success(data); } finally { complete(); } };
                    var err = ttg.ajaxErrorFunction(error,complete);
                
                    ttgInvoker.invokeVFR(ttg.getController('DMAPP.AccountPoliticalMapController.removeOrgChartContact'),
                        contactId, 
                        planunitid || null,
                        function(result, event) { 
                            if (event.type == 'exception') { 
                                err(result,event);
                            } else {
                                succ(result); 
                            }
                        }, {escape: false}
                    )   
                }
        
                function loadOrgChart(id, success, error, complete) {   
                        
                    function sfdc_success(data) {
                        success(adapter.adaptLoadOrgChart(data));
                    }
                    
                    var succ = function(data) { try {sfdc_success(data)} finally { complete(); } };
                    var err = ttg.ajaxErrorFunction(error,complete); 
                    
                    ttgInvoker.invokeVFR(
                        ttg.getController('DMAPP.AccountPoliticalMapController.loadAccountOrgChartWithTasks'),
                        '{!JSENCODE(accountMap.id)}', 
                        '{!JSENCODE(planUnitId)}',
                        function(result, event) { 
                            if (event.type == 'exception') { 
                                err(result,event);
                            } else {
                                succ(result); 
                            }
                        }, {escape: false}
                    ) 
                }
        
                function addSubMap(submap, planunitid, success, error, complete) {
                    if(!complete) {
                        complete = function() {};
                    }
                
                    var succ = function(data) { try {success(data)} finally { complete(); } };
                    var err = ttg.ajaxErrorFunction(error,complete); 
                    
                    ttgInvoker.invokeVFR(
                        ttg.getController('DMAPP.AccountPoliticalMapController.addSubMap'),
                        submap,
                        planunitid || null,
                        function(result, event) { 
                            if (event.type == 'exception') { 
                                err(result,event);
                            } else {
                                succ(result); 
                            }
                        }, {escape: false}
                    ) 
                }
                
                function addSubMaps(submaps, planunitid, success, error, complete) {
                    if(!complete) {
                        complete = function() {};
                    }
                
                    var succ = function(data) { try {success(data)} finally { complete(); } };
                    var err = ttg.ajaxErrorFunction(error,complete); 
                    
                    ttgInvoker.invokeVFR(
                        ttg.getController('DMAPP.AccountPoliticalMapController.addSubMaps'),
                        submaps, 
                        planunitid || null,
                        function(result, event) { 
                            if (event.type == 'exception') { 
                                err(result,event);
                            } else {
                                succ(result); 
                            }
                        }, {escape: false}
                    ) 
                }
        
                function deleteSubMap(nodeid, planunitid, success, error, complete) {
                    if(!complete) {
                        complete = function() {};
                    }
                
                    var succ = function(data) { try {success(data)} finally { complete(); } };
                    var err = ttg.ajaxErrorFunction(error,complete); 
                    
                    ttgInvoker.invokeVFR(
                        ttg.getController('DMAPP.AccountPoliticalMapController.deleteSubMap'),
                        nodeid, 
                        planunitid || null,
                        function(result, event) { 
                            if (event.type == 'exception') { 
                                err(result,event);
                            } else {
                                succ(result); 
                            }
                        }, {escape: false}
                    ) 
                }

                function deleteMultipleSubMaps(nodeid, planunitid, success, error, complete) {
                    if(!complete) {
                        complete = function() {};
                    }

                    var succ = function(data) { try {success(data)} finally { complete(); } };
                    var err = ttg.ajaxErrorFunction(error,complete); 
                    
                    ttgInvoker.invokeVFR(
                        ttg.getController('DMAPP.AccountPoliticalMapController.deleteMultipleSubMaps'),
                        nodeid, 
                        planunitid || null,
                        function(result, event) { 
                            if (event.type == 'exception') { 
                                err(result,event);
                            } else {
                                succ(result); 
                            }
                        }, {escape: false}
                        ) 
                }
        
                var that = {};
                that.deleteMultipleSubMaps = deleteMultipleSubMaps;
                that.deleteSubMap = deleteSubMap;
                that.addSubMap = addSubMap;
                that.addSubMaps = addSubMaps;
                that.loadOrgChart = loadOrgChart;
                //that.createGraph = createGraph;    // No need to migrate as it is redundant.
                that.updateContactAttribute = updateContactAttributeJS;   // Migrated to use JS Remoting
                that.bulkUpdateContactAttribute = bulkUpdateContactAttributeJS;
                that.removeOrgChartContact = removeOrgChartContactJS;     // Migrated to use JS remoting
                that.addOrgChartContact = addOrgChartContactJS;           // Migrated to use JS remoting
                //that.getOrgChartContact = getOrgChartContact;  // No need to migrate as it is redundant.
                that.adaptSearchOrgCharts = adaptSearchOrgCharts;
                that.adaptSearchOrgChartsJS = adaptSearchOrgChartsJS;
                
                return that;
            })();
        
            var apilayer = ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}', graphId : '{!JSENCODE(accountMap.id)}' } );
            jQuery.extend(apilayer, apilayer.am);
            jQuery.extend(apilayer, accountPolMap);

            apilayer = ttg.apiLayer(apilayer);
            
            var fetchapi = ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}', disableCreateContact : {!disableCreationOfContacts} } );
            ttg.fetch.metadata('Opportunity', fetchapi);
            ttg.fetch.metadata('Account', fetchapi);
            ttg.fetch.metadata('Contact', fetchapi);
            
            var accounts = [
                {Id: '{!JSENCODE(accountMap.Account__c)}', Name: '{!JSENCODE(accountMap.Account__r.Name)}'}
                
            ];//politicalMapAccounts;
            
            var assocAcctIds = [];
            var assocAcctNames = [];
            <apex:repeat value="{!accountGroupMembers}" var="grpmember">
                assocAcctIds.push('{!JSENCODE(grpmember.Account__c)}');
                assocAcctNames.push('{!JSENCODE(grpmember.Account__r.Name)}');
            </apex:repeat>
            
            /**
            accounts = _.map(accounts, function(account) {
                return {Id: account[ttg.vfp + 'Account__r'].Id, Name: account.Name};
            });
            **/
            var loadIt = function() {
                
                var graphId = 'Id'

                if('{!JSENCODE(accountMapId)}') {
                    <apex:repeat value="{!accountMap.Linked_Maps__r}" var="linkmap">
                        assocAcctIds.push('{!JSENCODE(linkmap.Account__c)}');
                        assocAcctNames.push('{!JSENCODE(linkmap.Account__r.Name)}');
                    </apex:repeat>

                    assocAcctIds = _.uniq(assocAcctIds);
                    assocAcctNames = _.uniq(assocAcctNames);
                    
                    spec = {
                            graphId                         :   '{!JSENCODE(accountMap.Linked_Map__c)}' ? '{!JSENCODE(accountMap.Linked_Map__c)}' : '{!JSENCODE(accountMap.Id)}',
                            linkeeMapId                     :   '{!JSENCODE(accountMap.Linked_Map__c)}' ? '{!JSENCODE(accountMap.Id)}' : '',
                            orgId                           :   ttg.context.orgId,
                            sessionId                       :   ttg.context.sessionId,
                            sessionid                       :   ttg.context.sessionId,
                            url                             :   ttg.context.url,
                            orgChartType                    :   'accountpolmap',
                            mapaccounts                     :   accounts,
                            orgChartName                    :   '{!JSENCODE(accountMap.name)}',
                            readonly                        :   {! editable == false },
                            printUrl                        :   'Account_Pol_Map_Print?id={!JSENCODE(accountMap.id)}&',
                            associatedAccountId             :   '{!JSENCODE(accountMap.Account__c)}',
                            associatedAccountName           :   '{!JSENCODE(accountMap.Account__r.Name)}',
                            associatedAccountIds            :   assocAcctIds,
                            associatedAccountNames          :   assocAcctNames,
                            userName                        :   '{!JSENCODE(currentUserName)}',
                            userId                          :   '{!JSENCODE(currentUserId)}',
                            metadataOptions :   {
                                skipAttributes              :   ['buyingrole','approval']
                            },
                            disableCreateContact            :   {!disableCreationOfContacts},
                            displayTitle                    :   [
                                                                     '{!JSENCODE(accountMap.Linked_Map__c)}' ?
                                                                     '{!JSENCODE(accountMap.Linked_Map__r.Name)}'
                                                                     :
                                                                     '{!JSENCODE(accountMap.Name)}'
                                                                ],
                            apiMetadataTimestamp            :   'apiMetadataTimestamp',    
                            isStandaloneCRM                 :   false,
                            ttgApi                          :   apilayer,
                            add_contact_def_search_field    : 'AccountId',
                            hasAM                           : {!isLicensedForAccountManager},
                            hasOM                           : {! OR( isLicensedForOppManager, isLicensedForPoliticalMapExpress ) },
                            hasPoliticalMapExpress          : {!isLicensedForPoliticalMapExpress} && !{!isLicensedForOppManager},
                            nodeHeight                      :   150, //70,
                            nodeWidth                       :   130, //100
                            dateFormat                      :   '{!jQueryUIDateFormat}',
                            disableContactCreation          : {!disableCreationOfContacts},
                            hideActions                     : {!hideActions},
                            hideIssues                      : {!hideIssues},
                            skin                            : '{!JSENCODE(politicalMapSkin)}',
                            socialSettings                  : '{!JSENCODE(socialMediaSettings)}',
                            disableCoaching                 : {!disableCoaching},
                            politicalMapCoachRules          : {
                                contact_coaching_rules  : ttg.coach_am_political_map_contact_rules,
                                contact_profile_rules   : ttg.coach_am_political_map_profile_rules,
                                map_rules               : ttg.coach_am_political_map_rules
                            },                    
                            fullscreen                        : {!fullScreen},
                            showInfluenceLines              : {!showInfluenceLines},
                            viewModeInfluenceLines          : {!viewInfluenceLines},
                            attachmentFileServletUrl: '{! attachmentFileServletUrl}',
                            hideCreateMsg                   : true,
                            calledFromAM                    : true,
                            //hideImportButton                : true,
                            accountLevelMap                 : true,
                            accountGrouping                 : {!accountGroupingEnabled},
                            isoCode							: '{!JSENCODE(currencyISO)}',
                            fullscreenmode                  : {!fullScreen},
                            usedElseWhere					: {!accountMapUsage != null && accountMapUsage.usedElseWhere},
    	                    areContactImagesDisabled		: {! areContactImagesDisabled},
                    };
                     
                    if('{!JSENCODE(opportunityMapId)}') {
                       spec.notFullscreenOverride = '{!$CurrentPage.parameters.retURL}' ? 
                                                        decodeURIComponent('{!$CurrentPage.parameters.retURL}') :
                                                        '/apex/' + ttg.vfp + 'am_opp_map_app?id=' + '{!JSENCODE(opportunityMapId)}';
                       spec.oppmapid = '{!JSENCODE(opportunityMapId)}';
                       spec.planunitid = '{!JSENCODE(planUnitId)}';
                       spec.planunitname = '{!JSENCODE(planUnit.name)}';
                       spec.associatedmapid = '{!JSENCODE(planUnit.Account_Political_Map__c)}';
                       spec.associatedmapname = '{!JSENCODE(planUnit.Account_Political_Map__r.Name)}';
                    }
                } else {
                    assocAcctIds = _.uniq(assocAcctIds);
                    assocAcctNames = _.uniq(assocAcctNames);

                    spec = {
                        graphId                         :   '',
                        orgId                           :   ttg.context.orgId,
                        sessionId                       :   ttg.context.sessionId,
                        sessionid                       :   ttg.context.sessionId,
                        url                             :   ttg.context.url,
                        orgChartType                    :   'accountpolmap',
                        mapaccounts                     :   accounts,
                        associatedAccountId             :   assocAcctIds && assocAcctIds.length ? assocAcctIds[0] : '{!JSENCODE(account.Id)}',
                        associatedAccountName           :   assocAcctNames && assocAcctNames.length ? assocAcctNames[0] : '{!JSENCODE(account.Name)}',
                        associatedAccountIds            :   assocAcctIds,
                        associatedAccountNames          :   assocAcctNames,
                        orgChartName                    :   '{!JSENCODE(opportunityMapId)}' ? '{!JSENCODE(planUnit.name)}' : '{!JSENCODE(account.name)}',
                        readonly                        :   {! editable == false },
                        userName                        :   '{!JSENCODE(currentUserName)}',
                        userId                          :   '{!JSENCODE(currentUserId)}',
                        metadataOptions :   {
                            skipAttributes              :   ['buyingrole','approval']
                        },
                        disableCreateContact            :   {!disableCreationOfContacts},
                        displayTitle                    :   [
                                                                 '{!JSENCODE(account.Name)}'
                                                            ],
                        apiMetadataTimestamp            :   'apiMetadataTimestamp',    
                        isStandaloneCRM                 :   false,
                        ttgApi                          :   apilayer,
                        add_contact_def_search_field    : 'AccountId',
                        hasAM                           : {!isLicensedForAccountManager},
                        hasOM                           : {! OR( isLicensedForOppManager, isLicensedForPoliticalMapExpress ) },
                        hasPoliticalMapExpress          : {!isLicensedForPoliticalMapExpress} && !{!isLicensedForOppManager},
                        nodeHeight                      :   150, //70,
                        nodeWidth                       :   130, //100
                        dateFormat                      :   '{!jQueryUIDateFormat}',
                        disableContactCreation          : {!disableCreationOfContacts},
                        hideActions                     : {!hideActions},
                        hideIssues                      : {!hideIssues},
                        skin                            : '{!JSENCODE(politicalMapSkin)}',
                        socialSettings                  : '{!JSENCODE(socialMediaSettings)}',
                        disableCoaching                 : {!disableCoaching},
                        politicalMapCoachRules          : {
                            contact_coaching_rules  : ttg.coach_am_political_map_contact_rules,
                            contact_profile_rules   : ttg.coach_am_political_map_profile_rules,
                            map_rules               : ttg.coach_am_political_map_rules
                        },                    
                        fullscreen                        : {!fullScreen},
                        usedElseWhere					: {!accountMapUsage != null && accountMapUsage.usedElseWhere},
                        showInfluenceLines              : {!showInfluenceLines},
                        viewModeInfluenceLines          : {!viewInfluenceLines},
                        hideCreateMsg                   : true,
                        calledFromAM                    : true,
                        hideImportButton                : true,
                        accountLevelMap                 : true,
                        isoCode							: '{!JSENCODE(currencyISO)}',
                        accountGrouping                 : {!accountGroupingEnabled},
                        createGraph                     : function(createSpec, succ) {
                            if(!succ) {
                                succ = function() {}
                            }
                             
                            var mapMetadataControl = null;
                            var metadataCreate = null;
                             
                            var createSpec = ttg.getDefaultCreateMapSpec(spec);
                            createSpec.autosearch = true;
                            createSpec.title = partnerLabels.political_analysis_launchpad_politics;
                            var oldpresave = createSpec.preSave;
                            var postCreateCanceled = false;

                            createSpec.preSave = function(that, spec) {
                                oldpresave(that, spec);
                                var dlg = that.getDialog();
                                var fields = spec.fields;
                            };

                            createSpec.postSave = function(a, b, c) {
                                succ(a, b, c);

                                if((typeof window.sforce != 'undefined') && (window.sforce != null) && 
                                    (typeof window.sforce.one != 'undefined') && (window.sforce.one != null)) {
                                    window.sforce.one.navigateToURL('/apex/' + ttg.vfp + 'Account_Pol_Map?id=' + a.Id);
                                } else {
                                    window.location.href = '/apex/' + ttg.vfp + 'Account_Pol_Map?id=' + a.Id;
                                }
                            };

                            createSpec.postCreateCancel = function() {
                                !postCreateCanceled && ttg.tasNavigateToSObject('{!JSENCODE(account.Id)}');
                                postCreateCanceled = true;
                            };
                
                            if('{!JSENCODE(opportunityMapId)}') {
                                createSpec.postCreateCancel = function() {
                                    var redirectpage = '{!$CurrentPage.parameters.retURL}' ? 
                                            decodeURIComponent('{!$CurrentPage.parameters.retURL}') :
                                            '/apex/' + ttg.vfp + 'am_opp_map_app?id=' + '{!JSENCODE(opportunityMapId)}';

                                    if((typeof window.sforce != 'undefined') && (window.sforce != null) && 
                                        (typeof window.sforce.one != 'undefined') && (window.sforce.one != null)) {
                                        window.sforce.one.navigateToURL(redirectpage);
                                    } else {
                                        window.location.href = redirectpage;
                                    }

                                };
                                
                                createSpec.unFocusOverride = createSpec.postCreateCancel;
                                  
                                createSpec.postSave = function(a, b, c) {
                                    var success = function(a2, b2, c2) {
                                      
                                        var extraparam = '{!$CurrentPage.parameters.retURL}' ? '&retURL=' + encodeURIComponent('{!$CurrentPage.parameters.retURL}') : '';

                                        if((typeof window.sforce != 'undefined') && (window.sforce != null) && 
                                            (typeof window.sforce.one != 'undefined') && (window.sforce.one != null)) {
                                            window.sforce.one.navigateToURL('/apex/' + ttg.vfp + 'Account_Pol_Map?id=' + a.Id + '&oppmapid=' + '{!JSENCODE(opportunityMapId)}' +  '&planunitid=' + '{!JSENCODE(planUnitId)}' + '&fullscreen=true' + extraparam);
                                        } else {
                                            window.location.href = '/apex/' + ttg.vfp + 'Account_Pol_Map?id=' + a.Id + '&oppmapid=' + '{!JSENCODE(opportunityMapId)}' +  '&planunitid=' + '{!JSENCODE(planUnitId)}' + '&fullscreen=true' + extraparam;
                                        }
                                          
                                    };
                                
                                    var error = function() {};
                                    var complete = function() {};

                                    var succ = function(data) { try {success(data)} finally { complete(); } };
                                    var err = ttg.ajaxErrorFunction(error,complete); 
                                          
                                    ttgInvoker.invokeVFR(
                                        ttg.getController('DMAPP.AccountPoliticalMapController.associatePlanUnitAccountOrgChart'),
                                        '{!JSENCODE(planUnitId)}',
                                        a.Id, 
                                        function(result, event) { 
                                            if (event.type == 'exception') { 
                                                err(result,event);
                                            } else {
                                                succ(result); 
                                            }
                                        },
                                        {escape: false}
                                    );
                                }; // end of postSave

                                var oldpostdisplay = createSpec.postDisplay;
                                createSpec.postDisplay = function(dlg, data) {
                                    var btns = dlg.dialog( 'option', 'buttons' );

                                    if({! editable == false }) {
                                        jQuery('button[ttgid="Save_button"]').attr('disabled', true).addClass('DISABLED');
                                    }
                                              
                                    var currclickfunc = btns['Save'];

                                    var newsave = function() {
                                        var isExisting = jQuery('input#existingmap:checked').length > 0;

                                        if(isExisting) {
                                            var mapid = dlg.find('#' + ttg.vfp + 'Linked_Map__c INPUT[type=\'hidden\']').val();

                                            if(!mapid) {
                                                dlg.find('td#ERROR_' + ttg.vfp + 'Linked_Map__c').removeClass('ERROR');
                                                dlg.find('td#ERROR_' + ttg.vfp + 'Linked_Map__c').addClass('ERROR');
                                                dlg.find('td#ERROR_' + ttg.vfp + 'Linked_Map__c').text('Please select a Map');
                                                return;
                                            }

                                            var success = function(a, b, c) {
                                                      
                                                if((typeof window.sforce != 'undefined') && (window.sforce != null) && 
                                                    (typeof window.sforce.one != 'undefined') && (window.sforce.one != null)) {
                                                    window.sforce.one.navigateToURL(
                                                        '/apex/' + ttg.vfp + 'Account_Pol_Map?id=' + mapid + '&oppmapid=' + 
                                                        '{!JSENCODE(opportunityMapId)}' + '&planunitid=' + 
                                                        '{!JSENCODE(planUnitId)}' + '&fullscreen=true'
                                                    );
                                                } else {
                                                    window.location.href = '/apex/' + ttg.vfp + 'Account_Pol_Map?id=' + mapid + 
                                                        '&oppmapid=' + '{!JSENCODE(opportunityMapId)}' + '&planunitid=' + 
                                                        '{!JSENCODE(planUnitId)}' + '&fullscreen=true';
                                                }

                                            };

                                            var error = function() {};
                                            var complete = function() {};

                                            var succ = function(data) { try {success(data)} finally { complete(); } };
                                            var err = ttg.ajaxErrorFunction(error,complete); 
                                                          
                                            ttgInvoker.invokeVFR(
                                                ttg.getController('DMAPP.AccountPoliticalMapController.associatePlanUnitAccountOrgChart'),
                                                '{!JSENCODE(planUnitId)}',
                                                mapid, 
                                                function(result, event) { 
                                                    if (event.type == 'exception') { 
                                                        err(result,event);
                                                    } else {
                                                        succ(result); 
                                                    }
                                                },
                                                {escape: false}
                                            );
                                        } else {
                                            currclickfunc();
                                        }
                                    };
                                          
                                    oldpostdisplay(dlg, data);

                                    jQuery('button[ttgid="Save_button"]').unbind('click').on('click', newsave);
                                } //end of postDisplay function
                            } 
                            metadataCreate = ttg.metadata(createSpec);
                            metadataCreate.create(ttg.vfp + 'Account_Political_Map__c');
                        } // end of createGraph function
                    } // end of spec
                             
                    if('{!JSENCODE(opportunityMapId)}') {
                        spec.notFullscreenOverride = '/apex/' + ttg.vfp + 'am_opp_map_app?id=' + '{!JSENCODE(opportunityMapId)}';
                        spec.oppmapid = '{!JSENCODE(opportunityMapId)}';
                        spec.planunitid = '{!JSENCODE(planUnitId)}';
                        spec.planunitname = '{!JSENCODE(planUnit.name)}';
                    }
                            
                    if({!markprimary}) {
                        spec.markprimary = true;
                        if({!oldestMapForDefaultPrimaryMark != null}) {
                            spec.oldestmapname = '{!JSENCODE(oldestMapForDefaultPrimaryMark.Name)}';
                            spec.oldestmapid = '{!JSENCODE(oldestMapForDefaultPrimaryMark.Id)}';
                        }
                    }
                } // end of else ('{!JSENCODE(accountMapId)}')

                daGraph = ttg.displayGraph(spec);
            } // end of loadIt function
                     
            loadIt();
        });


        function openit() {
            ttg.legendBox(daGraph.getConfig(), daGraph.getOrgChartMetadata());
        }

        function handlePPTX() {
            ttg.simpleFlatPPTExporter('{!accountMap.id}', {!isLicensedForPPT});
        }
        
        function toggleActionsMenu() {
            if({!editable == false}) {
                return;
            }
            var actionsMenu = jQuery('#ActionsMenu');
            var visible = actionsMenu.is(':visible');
            visible ? actionsMenu.hide() : actionsMenu.show(); 
        }
        
        function hideActionsMenu() {
            var actionsMenu = jQuery('#ActionsMenu');
            actionsMenu.hide(); 
        }
        
        function makeMapPrimary() {
        	var confirmDialog = jQuery('<div/>', {id: 'makeMapPrimaryDialog'}).
    			append(jQuery('<span/>').text('You are about to set this map to be the Primary Map on the Account. This will update the Insight Component to use this Map. Are you sure that want to continue?'));
    			confirmDialog.dialog({
    				modal: true,
    				title: 'Make Map Primary',
    				buttons: {
    					'Yes' : function() 	{ 	
    					
    						var ttgApi = ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}', accountid : '{!accountMap.id}'} );
    						var mapId = '{!JSENCODE(accountMap.Linked_Map__c)}' ? '{!JSENCODE(accountMap.Linked_Map__c)}' : '{!JSENCODE(accountMap.Id)}';
    						ttgApi.markOrgChartAsPrimary(mapId,
    			                function() { confirmDialog.dialog('close'); },                    
    			                function() { /* error */ },                 
    			                function() { /* complete */ }               
    			            )
    					},
    					'No' : function() { 
    						confirmDialog.dialog('close'); 
    					}
    				}
    			});
             
        }
        
        function renameMap() {
        
        	var mapName = '{!JSENCODE(accountMap.Linked_Map__c)}' ? '{!JSENCODE(accountMap.Linked_Map__r.Name)}' : '{!JSENCODE(accountMap.Name)}';
        	
        	function setUpMinLimitCheck() {
        	
        		var limitSize = 2;

                jQuery('#newMapName').on('change keydown keyup mousedown mouseup', function() {
                    var $this = jQuery(this);
                    var value = $this.attr('value');
                    var valueTrimmed = jQuery.trim(value);
                    var valueLength = valueTrimmed.length || 0;
                                    
                    var saveButton = jQuery(".ui-dialog-buttonpane button:contains('Save')");
                    
                    if(valueLength < limitSize) {
                        saveButton.button("disable");
                    } else {
                    	saveButton.button("enable");
                    }
            
                });

            };
        	
        	var renameMapDialog = jQuery('<div/>', {id: 'renameMapDialog'})
    			.append(jQuery('<span/>').append(jQuery('<strong/>').text('Map Name ')))
    			.append(jQuery('<input/>', {id: 'newMapName'}).val(mapName));
    						
    		renameMapDialog.dialog({
    			modal: true,
    			title: 'Rename Map',
    			buttons: {
    				'Save' : function() 	{ 	
    				
    					var ttgApi = ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}', accountid : '{!accountMap.id}'} );
    					var mapId = '{!JSENCODE(accountMap.Linked_Map__c)}' ? '{!JSENCODE(accountMap.Linked_Map__c)}' : '{!JSENCODE(accountMap.Id)}';
    					var newMapName = jQuery('#newMapName').val();
    					var newMapNameTrimmed = jQuery.trim(newMapName);
    										
    					ttgApi.renameOrgChart(mapId, newMapNameTrimmed, 
    		                function() { renameMapDialog.dialog('close'); renameMapDialog.remove(); },                    
    		                function() { /* error */ },                 
    		                function() { reloadPage(); }               
    		            )
    				},
    				'Cancel' : function() { 
    					renameMapDialog.dialog('close');
    					renameMapDialog.remove();
    				}
    			}
    		});
             
            setUpMinLimitCheck();
        }

        var spec = {};
        help.showHelp = function() {
                var url = '{!helpURLBase}' + '/Default.htm#AM/';
            
                url += 'Account_Rel_Maps/Account_Rel_Maps.htm';
                
                var testwindow = window.open(url, "TAS", "resizable=1,location=1,status=1,scrollbars=1,width=600,height=600");
        }

        jQuery(document).mouseup(function (e)
        {
            var actionsDiv = jQuery('#ActionsDiv');
            if (!actionsDiv.is(e.target) // if the target of the click isn't the actionsDiv...
                && actionsDiv.has(e.target).length === 0) // ... nor a descendant of the actionsDiv
            {
                hideActionsMenu();
            }
            
        });
        
        jQuery('#showAccountMapUsageLink').add(jQuery('#showAccountMapUsageLinkOpp')).click(function() {
        	var usageDialog = jQuery('#accountMapUsageDialog');
        	usageDialog.dialog({
        		title: 'Where This Map is Used',
        		width: '450px',
        		modal: true,
                buttons: [{
                	id: 'close-usage-dialog',
                	text: 'Close',
                    click: function() {	                           
						jQuery(this).dialog('close'); 
					}	                 	
                }]
        	}); 
        });

        function toggleCreateMenu() {
            var createDropdown = jQuery('.create_dropdown_ul');
            createDropdown.toggleClass('show_dropdown'); 
        }
        
        if({!editable == false}) {
            jQuery('button.add_action_button').attr('disabled', 'disabled');
        }

        jQuery(document).mouseup(function (e)
        {
            var createDropdownButton = jQuery('.create_dropdown_button');
            var createDropdown = jQuery('.create_dropdown_ul');

            if ( !createDropdownButton.is(e.target) && createDropdownButton.has(e.target).length === 0 )
            {
                createDropdown.removeClass('show_dropdown');
            }

        });
        
    </script>   

</apex:page>